"use strict";
/* eslint-disable max-nested-callbacks */
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const src_1 = require("../src");
const validateTableData_1 = require("../src/validateTableData");
describe('validateTableData', () => {
    context('table does not have a row', () => {
        it('throws an error', () => {
            (0, chai_1.expect)(() => {
                (0, validateTableData_1.validateTableData)([]);
            }).to.throw(Error, 'Table must define at least one row.');
        });
    });
    context('table does not have a column', () => {
        it('throws an error', () => {
            (0, chai_1.expect)(() => {
                (0, validateTableData_1.validateTableData)([[]]);
            }).to.throw(Error, 'Table must define at least one column.');
        });
    });
    context('row data is not an array', () => {
        it('throws an error', () => {
            (0, chai_1.expect)(() => {
                (0, validateTableData_1.validateTableData)({});
            }).to.throw(Error, 'Table data must be an array.');
        });
    });
    context('column data is not an array', () => {
        it('throws an error', () => {
            (0, chai_1.expect)(() => {
                (0, validateTableData_1.validateTableData)([{}]);
            }).to.throw(Error, 'Table row data must be an array.');
        });
    });
    context('cell data contains a control character', () => {
        it('throws an error', () => {
            (0, chai_1.expect)(() => {
                (0, validateTableData_1.validateTableData)([
                    [
                        String.fromCodePoint(0x01),
                    ],
                ]);
            }).to.throw(Error, 'Table data must not contain control characters.');
        });
    });
    context('cell data contains newlines', () => {
        it('does not throw', () => {
            (0, chai_1.expect)(() => {
                (0, validateTableData_1.validateTableData)([['ab\nc']]);
            }).to.not.throw();
        });
    });
    context('cell data contains Windows-style newlines', () => {
        it('does not throw and replaces by Unix-style newline', () => {
            (0, chai_1.expect)(() => {
                (0, validateTableData_1.validateTableData)([['ab\r\nc']]);
            }).to.not.throw();
            (0, chai_1.expect)((0, src_1.table)([['ab\r\nc']])).to.equal('╔════╗\n║ ab ║\n║ c  ║\n╚════╝\n');
        });
    });
    context('cell data contains carriage return only', () => {
        it('throws an error', () => {
            (0, chai_1.expect)(() => {
                (0, validateTableData_1.validateTableData)([['ab\rc']]);
            }).to.throw(Error, 'Table data must not contain control characters.');
        });
    });
    context('cell data contains hyperlinks', () => {
        const OSC = '\u001B]';
        const BEL = '\u0007';
        const SEP = ';';
        const url = 'https://example.com';
        const text = 'This is a link to example.com';
        const link = [
            OSC,
            '8',
            SEP,
            SEP,
            url,
            BEL,
            text,
            OSC,
            '8',
            SEP,
            SEP,
            BEL,
        ].join('');
        it('does not throw', () => {
            (0, chai_1.expect)(() => {
                (0, validateTableData_1.validateTableData)([[link]]);
            }).to.not.throw();
        });
    });
    context('rows have inconsistent number of cells', () => {
        it('throws an error', () => {
            (0, chai_1.expect)(() => {
                (0, validateTableData_1.validateTableData)([
                    ['a', 'b', 'c'],
                    ['a', 'b'],
                ]);
            }).to.throw(Error, 'Table must have a consistent number of cells.');
        });
    });
});
//# sourceMappingURL=validateTableData.js.map