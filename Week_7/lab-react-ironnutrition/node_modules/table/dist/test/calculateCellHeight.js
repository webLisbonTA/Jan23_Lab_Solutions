"use strict";
/* eslint-disable max-nested-callbacks */
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const calculateCellHeight_1 = require("../src/calculateCellHeight");
describe('calculateCellHeight', () => {
    describe('value', () => {
        it('contains newlines', () => {
            (0, chai_1.expect)((0, calculateCellHeight_1.calculateCellHeight)('a\nb\nc', 10)).to.equal(3);
        });
        it('contains newlines and will be wrapped', () => {
            (0, chai_1.expect)((0, calculateCellHeight_1.calculateCellHeight)('aa\nbbb\nc', 2)).to.equal(4);
        });
    });
    describe('context width', () => {
        context('is lesser than the column width', () => {
            it('has height 1', () => {
                (0, chai_1.expect)((0, calculateCellHeight_1.calculateCellHeight)('foo', 10)).to.equal(1);
            });
        });
        context('is 2 and half times greater than the column width', () => {
            it('has height 3', () => {
                (0, chai_1.expect)((0, calculateCellHeight_1.calculateCellHeight)('aabbc', 2)).to.equal(3);
            });
        });
    });
});
//# sourceMappingURL=calculateCellHeight.js.map