"use strict";
/* eslint-disable max-nested-callbacks */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
// eslint-disable-next-line import/no-namespace
const Sinon = __importStar(require("sinon"));
const src_1 = require("../src");
describe('createStream', () => {
    context('"config.columnDefault.width" property is not provided', () => {
        it('throws an error', () => {
            (0, chai_1.expect)(() => {
                (0, src_1.createStream)({
                    columnCount: 1,
                    columnDefault: {},
                });
            }).to.throw(Error, 'Must provide config.columnDefault.width when creating a stream.');
        });
    });
    context('Table data cell count does not match the columnCount.', () => {
        it('throws an error', () => {
            (0, chai_1.expect)(() => {
                const stream = (0, src_1.createStream)({
                    columnCount: 10,
                    columnDefault: {
                        width: 10,
                    },
                });
                stream.write(['foo']);
            }).to.throw(Error, 'Row cell count does not match the config.columnCount.');
        });
    });
    context('normal stream', () => {
        let stub;
        beforeEach(() => {
            stub = Sinon.stub(process.stdout, 'write');
        });
        afterEach(() => {
            stub.restore();
            stub.resetHistory();
        });
        it('process.stdout.write calls twice with proper arguments', () => {
            const stream = (0, src_1.createStream)({
                border: (0, src_1.getBorderCharacters)('ramac'),
                columnCount: 3,
                columnDefault: {
                    width: 2,
                },
                columns: {
                    0: {
                        alignment: 'right',
                        paddingLeft: 3,
                    },
                    1: {
                        alignment: 'center',
                        paddingRight: 2,
                    },
                    2: {
                        alignment: 'left',
                        width: 5,
                    },
                },
            });
            stream.write(['a b', 'ccc', 'd']);
            stream.write(['e', 'f', 'g']);
            Sinon.assert.callCount(stub, 2);
            Sinon.assert.calledWithExactly(stub.getCall(0), '+------+-----+-------+\n|   a  | cc  | d     |\n|    b | c   |       |\n+------+-----+-------+');
            Sinon.assert.calledWithExactly(stub.getCall(1), '\r\u001b[K|------|-----|-------|\n|    e | f   | g     |\n+------+-----+-------+');
        });
        context('given custom drawVerticalLine', () => {
            it('use the callback to draw vertical lines', () => {
                const stream = (0, src_1.createStream)({
                    columnCount: 2,
                    columnDefault: {
                        width: 2,
                    },
                    drawVerticalLine: (index) => {
                        return index === 1;
                    },
                });
                stream.write(['a', 'b']);
                Sinon.assert.callCount(stub, 1);
                Sinon.assert.calledOnceWithExactly(stub, '════╤════\n a  │ b  \n════╧════');
            });
        });
        context('append empty row', () => {
            it('does not add a new line', () => {
                const stream = (0, src_1.createStream)({
                    border: (0, src_1.getBorderCharacters)('void'),
                    columnCount: 1,
                    columnDefault: {
                        width: 2,
                    },
                });
                stream.write(['a']);
                stream.write(['']);
                stream.write(['a']);
                Sinon.assert.calledWithExactly(stub.getCall(1), '');
                Sinon.assert.calledWithExactly(stub.getCall(2), '\n a');
            });
        });
    });
});
//# sourceMappingURL=createStream.js.map