"use strict";
/* eslint-disable max-nested-callbacks */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const chalk_1 = __importDefault(require("chalk"));
const alignTableData_1 = require("../src/alignTableData");
const makeTableConfig_1 = require("../src/makeTableConfig");
describe('alignTableData', () => {
    context('when the string width is equal to column width config', () => {
        it('returns the unchange string', () => {
            const rows = [['aaa'], [chalk_1.default.red('bbb')]];
            (0, chai_1.expect)((0, alignTableData_1.alignTableData)(rows, (0, makeTableConfig_1.makeTableConfig)(rows, {
                columns: {
                    0: {
                        width: 3,
                    },
                },
            }))).to.deep.equal(rows);
        });
    });
    context('when the string is different from the column width config', () => {
        it('aligns cells with column width and alignment config', () => {
            const rows = [['a', 'b', 'c'],
                [chalk_1.default.red('a'), chalk_1.default.red('b'), chalk_1.default.red('c')]];
            (0, chai_1.expect)((0, alignTableData_1.alignTableData)(rows, (0, makeTableConfig_1.makeTableConfig)(rows, {
                columnDefault: {
                    width: 3,
                },
                columns: {
                    0: {
                        alignment: 'left',
                    },
                    1: {
                        alignment: 'right',
                    },
                    2: {
                        alignment: 'center',
                    },
                },
            }))).to.deep.equal([['a  ', '  b', ' c '], [
                    chalk_1.default.red('a') + '  ', '  ' + chalk_1.default.red('b'), ' ' + chalk_1.default.red('c') + ' ',
                ]]);
        });
    });
    context('when the string is longer then column width', () => {
        it('throws an error', () => {
            const rows = [['aaaa']];
            (0, chai_1.expect)(() => {
                (0, alignTableData_1.alignTableData)(rows, (0, makeTableConfig_1.makeTableConfig)(rows, {
                    columns: {
                        0: {
                            width: 3,
                        },
                    },
                }));
            }).to.throw(Error, 'Subject parameter value width cannot be greater than the container width.');
        });
    });
});
//# sourceMappingURL=alignTableData.js.map