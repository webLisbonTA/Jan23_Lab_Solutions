"use strict";
/* eslint-disable max-nested-callbacks */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const chalk_1 = __importDefault(require("chalk"));
const alignString_1 = require("../src/alignString");
const utils_1 = require("./utils");
describe('alignString', () => {
    context('subject parameter value width is greater than the container width', () => {
        it('throws an error', () => {
            (0, chai_1.expect)(() => {
                (0, alignString_1.alignString)('aa', 1, 'left');
            }).to.throw(Error, 'Subject parameter value width cannot be greater than the container width.');
        });
    });
    context('subject parameter value', () => {
        context('0 width', () => {
            it('produces a string consisting of container width number of whitespace characters', () => {
                (0, chai_1.expect)((0, alignString_1.alignString)('', 5, 'left')).to.equal('     ', 'left');
                (0, chai_1.expect)((0, alignString_1.alignString)('', 5, 'center')).to.equal('     ', 'center');
                (0, chai_1.expect)((0, alignString_1.alignString)('', 5, 'justify')).to.equal('     ', 'justify');
                (0, chai_1.expect)((0, alignString_1.alignString)('', 5, 'right')).to.equal('     ', 'right');
            });
        });
        context('plain text', () => {
            context('alignment', () => {
                context('left', () => {
                    it('pads the string on the right side using a whitespace character', () => {
                        (0, chai_1.expect)((0, alignString_1.alignString)('aa', 6, 'left')).to.equal('aa    ');
                    });
                });
                context('right', () => {
                    it('pads the string on the left side using a whitespace character', () => {
                        (0, chai_1.expect)((0, alignString_1.alignString)('aa', 6, 'right')).to.equal('    aa');
                    });
                });
                context('center', () => {
                    it('pads the string on both sides using a whitespace character', () => {
                        (0, chai_1.expect)((0, alignString_1.alignString)('aa', 8, 'center')).to.equal('   aa   ');
                    });
                    context('uneven number of available with', () => {
                        it('floors the available width; adds extra space to the end of the string', () => {
                            (0, chai_1.expect)((0, alignString_1.alignString)('aa', 7, 'center')).to.equal('  aa   ');
                        });
                    });
                });
                context('justify', () => {
                    it('align left if not contain spaces', () => {
                        (0, chai_1.expect)((0, alignString_1.alignString)('aa', 5, 'justify')).to.equal('aa   ');
                    });
                    it('add missing spaces between two words', () => {
                        (0, chai_1.expect)((0, alignString_1.alignString)('a a', 5, 'justify')).to.equal('a   a');
                        (0, chai_1.expect)((0, alignString_1.alignString)('a  a', 5, 'justify')).to.equal('a   a');
                        (0, chai_1.expect)((0, alignString_1.alignString)('a   a', 5, 'justify')).to.equal('a   a');
                    });
                    it('multiple words, distribute spaces from left to right when maximum adding spaces in one place are not greater than 3', () => {
                        (0, chai_1.expect)((0, alignString_1.alignString)('a b c', 5, 'justify')).to.equal('a b c');
                        (0, chai_1.expect)((0, alignString_1.alignString)('a b c', 6, 'justify')).to.equal('a  b c');
                        (0, chai_1.expect)((0, alignString_1.alignString)('a b c', 7, 'justify')).to.equal('a  b  c');
                        (0, chai_1.expect)((0, alignString_1.alignString)('a b c', 8, 'justify')).to.equal('a   b  c');
                        (0, chai_1.expect)((0, alignString_1.alignString)('a b c', 9, 'justify')).to.equal('a   b   c');
                        (0, chai_1.expect)((0, alignString_1.alignString)('a b c', 10, 'justify')).to.equal('a    b   c');
                        (0, chai_1.expect)((0, alignString_1.alignString)('a b c', 11, 'justify')).to.equal('a    b    c');
                        (0, chai_1.expect)((0, alignString_1.alignString)('a b c', 12, 'justify')).to.equal('a b c       ');
                        (0, chai_1.expect)((0, alignString_1.alignString)('a  bbb cc d', 11, 'justify')).to.equal('a  bbb cc d');
                        (0, chai_1.expect)((0, alignString_1.alignString)('a  bbb cc d', 12, 'justify')).to.equal('a   bbb cc d');
                        (0, chai_1.expect)((0, alignString_1.alignString)('a  bbb cc d', 13, 'justify')).to.equal('a   bbb  cc d');
                        (0, chai_1.expect)((0, alignString_1.alignString)('a  bbb cc d', 14, 'justify')).to.equal('a   bbb  cc  d');
                    });
                });
            });
        });
        context('text containing ANSI escape codes', () => {
            context('alignment', () => {
                context('left', () => {
                    it('pads the string on the right side using a whitespace character', () => {
                        (0, chai_1.expect)((0, alignString_1.alignString)(chalk_1.default.red('aa'), 6, 'left')).to.equal(chalk_1.default.red('aa') + '    ');
                    });
                });
                context('right', () => {
                    it('pads the string on the left side using a whitespace character', () => {
                        (0, chai_1.expect)((0, alignString_1.alignString)(chalk_1.default.red('aa'), 6, 'right')).to.equal('    ' + chalk_1.default.red('aa'));
                    });
                });
                context('center', () => {
                    it('pads the string on both sides using a whitespace character', () => {
                        (0, chai_1.expect)((0, alignString_1.alignString)(chalk_1.default.red('aa'), 6, 'center')).to.equal('  ' + chalk_1.default.red('aa') + '  ');
                    });
                    context('uneven number of available with', () => {
                        it('floors the available width; adds extra space to the end of the string', () => {
                            (0, chai_1.expect)((0, alignString_1.alignString)(chalk_1.default.red('aa'), 7, 'center')).to.equal('  ' + chalk_1.default.red('aa') + '   ');
                        });
                    });
                });
                context('justify', () => {
                    it('align left if not contain spaces', () => {
                        (0, chai_1.expect)((0, alignString_1.alignString)(chalk_1.default.red('aa'), 5, 'justify')).to.equal(chalk_1.default.red('aa') + '   ');
                    });
                    it('add missing spaces between two words', () => {
                        (0, chai_1.expect)((0, alignString_1.alignString)((0, utils_1.stringToRed)('a a'), 5, 'justify')).to.equal((0, utils_1.stringToRed)('a   a'));
                        (0, chai_1.expect)((0, alignString_1.alignString)((0, utils_1.stringToRed)('a  a'), 5, 'justify')).to.equal((0, utils_1.stringToRed)('a   a'));
                        (0, chai_1.expect)((0, alignString_1.alignString)((0, utils_1.stringToRed)('a   a'), 5, 'justify')).to.equal((0, utils_1.stringToRed)('a   a'));
                    });
                    it('multiple words, uneven spaces add from left to right', () => {
                        (0, chai_1.expect)((0, alignString_1.alignString)((0, utils_1.stringToRed)('a b c'), 5, 'justify')).to.equal((0, utils_1.stringToRed)('a b c'));
                        (0, chai_1.expect)((0, alignString_1.alignString)((0, utils_1.stringToRed)('a b c'), 6, 'justify')).to.equal((0, utils_1.stringToRed)('a  b c'));
                        (0, chai_1.expect)((0, alignString_1.alignString)((0, utils_1.stringToRed)('a b c'), 7, 'justify')).to.equal((0, utils_1.stringToRed)('a  b  c'));
                        (0, chai_1.expect)((0, alignString_1.alignString)((0, utils_1.stringToRed)('a b c'), 8, 'justify')).to.equal((0, utils_1.stringToRed)('a   b  c'));
                        (0, chai_1.expect)((0, alignString_1.alignString)((0, utils_1.stringToRed)('a b c'), 9, 'justify')).to.equal((0, utils_1.stringToRed)('a   b   c'));
                        (0, chai_1.expect)((0, alignString_1.alignString)((0, utils_1.stringToRed)('a b c'), 10, 'justify')).to.equal((0, utils_1.stringToRed)('a    b   c'));
                        (0, chai_1.expect)((0, alignString_1.alignString)((0, utils_1.stringToRed)('a  bbb cc d'), 11, 'justify')).to.equal((0, utils_1.stringToRed)('a  bbb cc d'));
                        (0, chai_1.expect)((0, alignString_1.alignString)((0, utils_1.stringToRed)('a  bbb cc d'), 12, 'justify')).to.equal((0, utils_1.stringToRed)('a   bbb cc d'));
                        (0, chai_1.expect)((0, alignString_1.alignString)((0, utils_1.stringToRed)('a  bbb cc d'), 13, 'justify')).to.equal((0, utils_1.stringToRed)('a   bbb  cc d'));
                        (0, chai_1.expect)((0, alignString_1.alignString)((0, utils_1.stringToRed)('a  bbb cc d'), 14, 'justify')).to.equal((0, utils_1.stringToRed)('a   bbb  cc  d'));
                    });
                });
            });
        });
    });
});
//# sourceMappingURL=alignString.js.map