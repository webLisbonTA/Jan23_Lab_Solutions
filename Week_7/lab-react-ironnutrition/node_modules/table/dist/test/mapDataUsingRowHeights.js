"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const chalk_1 = __importDefault(require("chalk"));
const makeTableConfig_1 = require("../src/makeTableConfig");
const mapDataUsingRowHeights_1 = require("../src/mapDataUsingRowHeights");
describe('mapDataUsingRowHeights', () => {
    context('no data spans multiple rows', () => {
        it('maps data to a single cell', () => {
            const rowHeights = [1];
            const data = [
                ['aa'],
            ];
            const config = (0, makeTableConfig_1.makeTableConfig)(data, {
                columns: {
                    0: {
                        width: 2,
                    },
                },
            });
            const mappedData = (0, mapDataUsingRowHeights_1.mapDataUsingRowHeights)(data, rowHeights, config);
            (0, chai_1.expect)(mappedData).to.deep.equal([
                ['aa'],
            ]);
        });
    });
    context('single cell spans multiple rows', () => {
        it('maps data to multiple rows', () => {
            const rowHeights = [5];
            const data = [
                ['aabbccddee'],
            ];
            const config = (0, makeTableConfig_1.makeTableConfig)(data, {
                columns: {
                    0: {
                        width: 2,
                    },
                },
            });
            const mappedData = (0, mapDataUsingRowHeights_1.mapDataUsingRowHeights)(data, rowHeights, config);
            (0, chai_1.expect)(mappedData).to.deep.equal([
                ['aa'],
                ['bb'],
                ['cc'],
                ['dd'],
                ['ee'],
            ]);
        });
    });
    context('single cell contains newlines', () => {
        it('maps data to multiple rows', () => {
            const rowHeights = [5];
            const data = [
                [
                    'aa\nbb\ncc\ndd\nee',
                ],
            ];
            const config = (0, makeTableConfig_1.makeTableConfig)(data, {
                columns: {
                    0: {
                        width: 100,
                    },
                },
            });
            const mappedData = (0, mapDataUsingRowHeights_1.mapDataUsingRowHeights)(data, rowHeights, config);
            (0, chai_1.expect)(mappedData).to.deep.equal([
                ['aa'],
                ['bb'],
                ['cc'],
                ['dd'],
                ['ee'],
            ]);
        });
        it('maps data with color coding to multiple rows', () => {
            const rowHeights = [
                5,
            ];
            const data = [
                [
                    chalk_1.default.red('aa\nbb\ncc\ndd\nee'),
                ],
            ];
            const config = (0, makeTableConfig_1.makeTableConfig)(data, {
                columns: {
                    0: {
                        width: 100,
                    },
                },
            });
            const mappedData = (0, mapDataUsingRowHeights_1.mapDataUsingRowHeights)(data, rowHeights, config);
            (0, chai_1.expect)(mappedData).to.deep.equal([
                [chalk_1.default.red('aa')],
                [chalk_1.default.red('bb')],
                [chalk_1.default.red('cc')],
                [chalk_1.default.red('dd')],
                [chalk_1.default.red('ee')],
            ]);
        });
    });
    context('multiple cells spans multiple rows', () => {
        it('maps data to multiple rows', () => {
            const rowHeights = [
                5,
            ];
            const data = [
                [
                    'aabbccddee',
                    '00001111',
                ],
            ];
            const config = (0, makeTableConfig_1.makeTableConfig)(data, {
                columns: {
                    0: {
                        width: 2,
                    },
                    1: {
                        width: 4,
                    },
                },
            });
            const mappedData = (0, mapDataUsingRowHeights_1.mapDataUsingRowHeights)(data, rowHeights, config);
            (0, chai_1.expect)(mappedData).to.deep.equal([
                [
                    'aa',
                    '0000',
                ],
                [
                    'bb',
                    '1111',
                ],
                [
                    'cc',
                    '',
                ],
                [
                    'dd',
                    '',
                ],
                [
                    'ee',
                    '',
                ],
            ]);
        });
    });
});
//# sourceMappingURL=mapDataUsingRowHeights.js.map