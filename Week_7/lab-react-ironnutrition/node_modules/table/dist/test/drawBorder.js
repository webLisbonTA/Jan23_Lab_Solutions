"use strict";
/* eslint-disable sort-keys-fix/sort-keys-fix */
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const drawBorder_1 = require("../src/drawBorder");
const makeTableConfig_1 = require("../src/makeTableConfig");
const defaultDrawVerticalLine = () => {
    return true;
};
const customDrawVerticalLine = (index, size) => {
    return index === size - 1;
};
context('drawBorder', () => {
    it('draws a border using parts', () => {
        const config = {
            drawVerticalLine: defaultDrawVerticalLine,
            separator: {
                left: '╔',
                right: '╗',
                body: '═',
                join: '╤',
            },
        };
        (0, chai_1.expect)((0, drawBorder_1.drawBorder)([1], config)).to.equal('╔═╗\n');
        (0, chai_1.expect)((0, drawBorder_1.drawBorder)([1, 1], config)).to.equal('╔═╤═╗\n');
        (0, chai_1.expect)((0, drawBorder_1.drawBorder)([5, 10], config)).to.equal('╔═════╤══════════╗\n');
        (0, chai_1.expect)((0, drawBorder_1.drawBorder)([5, 10], {
            ...config,
            drawVerticalLine: customDrawVerticalLine,
        })).to.equal('═════╤══════════\n');
    });
});
context('drawBorderTop', () => {
    it('draws a border using parts', () => {
        const config = {
            border: {
                topLeft: '╔',
                topRight: '╗',
                topBody: '═',
                topJoin: '╤',
            },
            drawVerticalLine: defaultDrawVerticalLine,
        };
        (0, chai_1.expect)((0, drawBorder_1.drawBorderTop)([1], config)).to.equal('╔═╗\n');
        (0, chai_1.expect)((0, drawBorder_1.drawBorderTop)([1, 1], config)).to.equal('╔═╤═╗\n');
        (0, chai_1.expect)((0, drawBorder_1.drawBorderTop)([5, 10], config)).to.equal('╔═════╤══════════╗\n');
        (0, chai_1.expect)((0, drawBorder_1.drawBorderTop)([5, 10], {
            ...config,
            drawVerticalLine: customDrawVerticalLine,
        })).to.equal('═════╤══════════\n');
    });
    it('no leading new line if borderless', () => {
        const config = {
            border: {
                topLeft: '',
                topRight: '',
                topBody: '',
                topJoin: '',
            },
            drawVerticalLine: defaultDrawVerticalLine,
        };
        (0, chai_1.expect)((0, drawBorder_1.drawBorderTop)([1], config)).to.equal('');
        (0, chai_1.expect)((0, drawBorder_1.drawBorderTop)([1, 1], config)).to.equal('');
        (0, chai_1.expect)((0, drawBorder_1.drawBorderTop)([5, 10], config)).to.equal('');
        (0, chai_1.expect)((0, drawBorder_1.drawBorderTop)([5, 10], {
            ...config,
            drawVerticalLine: customDrawVerticalLine,
        })).to.equal('');
    });
});
context('drawBorderJoin', () => {
    it('draws a border using parts', () => {
        const config = {
            border: {
                joinBody: '─',
                joinLeft: '╟',
                joinRight: '╢',
                joinJoin: '┼',
            },
            drawVerticalLine: defaultDrawVerticalLine,
        };
        (0, chai_1.expect)((0, drawBorder_1.drawBorderJoin)([1], config)).to.equal('╟─╢\n');
        (0, chai_1.expect)((0, drawBorder_1.drawBorderJoin)([1, 1], config)).to.equal('╟─┼─╢\n');
        (0, chai_1.expect)((0, drawBorder_1.drawBorderJoin)([5, 10], config)).to.equal('╟─────┼──────────╢\n');
        (0, chai_1.expect)((0, drawBorder_1.drawBorderJoin)([5, 10], {
            ...config,
            drawVerticalLine: customDrawVerticalLine,
        })).to.equal('─────┼──────────\n');
    });
});
context('drawBorderBottom', () => {
    it('draws a border using parts', () => {
        const config = {
            border: {
                bottomBody: '═',
                bottomJoin: '╧',
                bottomLeft: '╚',
                bottomRight: '╝',
            },
            drawVerticalLine: defaultDrawVerticalLine,
        };
        (0, chai_1.expect)((0, drawBorder_1.drawBorderBottom)([1], config)).to.equal('╚═╝\n');
        (0, chai_1.expect)((0, drawBorder_1.drawBorderBottom)([1, 1], config)).to.equal('╚═╧═╝\n');
        (0, chai_1.expect)((0, drawBorder_1.drawBorderBottom)([5, 10], config)).to.equal('╚═════╧══════════╝\n');
        (0, chai_1.expect)((0, drawBorder_1.drawBorderBottom)([5, 10], {
            ...config,
            drawVerticalLine: customDrawVerticalLine,
        })).to.equal('═════╧══════════\n');
    });
});
context('tableBorderGetter', () => {
    context('when config.header is undefined', () => {
        it('draw the table border normally', () => {
            const config = (0, makeTableConfig_1.makeTableConfig)([['a', 'b', 'c']], {
                header: undefined,
            });
            const getter = (0, drawBorder_1.createTableBorderGetter)([2, 1, 3], config);
            (0, chai_1.expect)(getter(0, 3)).to.equal('╔══╤═╤═══╗\n');
            (0, chai_1.expect)(getter(1, 3)).to.equal('╟──┼─┼───╢\n');
            (0, chai_1.expect)(getter(2, 3)).to.equal('╟──┼─┼───╢\n');
            (0, chai_1.expect)(getter(3, 3)).to.equal('╚══╧═╧═══╝\n');
        });
    });
    context('when config.header is defined', () => {
        it('draws the borders that modify for header', () => {
            const config = (0, makeTableConfig_1.makeTableConfig)([['a', 'b', 'c']], {
                header: {
                    content: 'ddd',
                },
            });
            const getter = (0, drawBorder_1.createTableBorderGetter)([2, 1, 3], config);
            (0, chai_1.expect)(getter(0, 3)).to.equal('╔════════╗\n');
            (0, chai_1.expect)(getter(1, 3)).to.equal('╟──┬─┬───╢\n');
            (0, chai_1.expect)(getter(2, 3)).to.equal('╟──┼─┼───╢\n');
            (0, chai_1.expect)(getter(3, 3)).to.equal('╚══╧═╧═══╝\n');
        });
    });
});
//# sourceMappingURL=drawBorder.js.map