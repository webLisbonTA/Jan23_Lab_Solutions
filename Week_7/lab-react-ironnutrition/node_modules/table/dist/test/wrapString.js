"use strict";
/* eslint-disable max-nested-callbacks */
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const wrapString_1 = require("../src/wrapString");
describe('wrapString', () => {
    context('subject is a plain text string', () => {
        context('subject is lesser than the chunk size', () => {
            it('returns subject in a single chunk', () => {
                (0, chai_1.expect)((0, wrapString_1.wrapString)('aaa', 3)).to.deep.equal(['aaa']);
            });
        });
        context('subject is larger than the chunk size', () => {
            it('returns subject sliced into multiple chunks', () => {
                (0, chai_1.expect)((0, wrapString_1.wrapString)('aaabbbc', 3)).to.deep.equal(['aaa', 'bbb', 'c']);
            });
        });
        context('a chunk starts with a space', () => {
            it('adjusts chunks to offset the space', () => {
                (0, chai_1.expect)((0, wrapString_1.wrapString)('aaa   bbb   ccc', 3)).to.deep.equal(['aaa', 'bbb', 'ccc']);
            });
        });
    });
    context('subject string contains ANSI escape codes', () => {
        const openRed = '\u001b[31m';
        const closeRed = '\u001b[39m';
        describe('subject is lesser than the chunk size', () => {
            it('returns subject in a single chunk', () => {
                (0, chai_1.expect)((0, wrapString_1.wrapString)(`${openRed}aa${closeRed}`, 3)).to.deep.equal([
                    `${openRed}aa${closeRed}`,
                ]);
            });
        });
        describe('subject is larger than the chunk size', () => {
            it('returns subject sliced into multiple chunks', () => {
                (0, chai_1.expect)((0, wrapString_1.wrapString)(`${openRed}aaabbbc${closeRed}`, 3)).to.deep.equal([
                    `${openRed}aaa${closeRed}`,
                    `${openRed}bbb${closeRed}`,
                    `${openRed}c${closeRed}`,
                ]);
            });
        });
    });
});
//# sourceMappingURL=wrapString.js.map