"use strict";
/* eslint-disable max-nested-callbacks */
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const wrapCell_1 = require("../src/wrapCell");
const wrapString_1 = require("../src/wrapString");
const wrapWord_1 = require("../src/wrapWord");
const utils_1 = require("./utils");
describe('wrapCell', () => {
    const strings = ['aa bb cc', 'a a bb cccc', 'aaabbcc', 'a\\bb', 'a_bb', 'a-bb', 'a.bb', 'a,bb', 'a;bb'];
    context('useWrapWord is enabled', () => {
        context('the string does not contain the newline character', () => {
            it('returns the same output as wrapWord\'s', () => {
                for (const string of strings) {
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)(string, 3, true)).to.deep.equal((0, wrapWord_1.wrapWord)(string, 3));
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)((0, utils_1.stringToRed)(string), 3, true)).to.deep.equal((0, utils_1.arrayToRed)((0, wrapWord_1.wrapWord)(string, 3)));
                }
            });
        });
        context('the string does contains the newline character', () => {
            context('the length of lineChunk is smaller than the length of container', () => {
                it('splits by the newlines', () => {
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('\n', 5, true)).to.deep.equal(['', '']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('a\n', 5, true)).to.deep.equal(['a', '']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('\na', 5, true)).to.deep.equal(['', 'a']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('\na\n', 5, true)).to.deep.equal(['', 'a', '']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('a\na', 5, true)).to.deep.equal(['a', 'a']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('a \na', 5, true)).to.deep.equal(['a', 'a']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('\n\n', 5, true)).to.deep.equal(['', '', '']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('a\n\n', 5, true)).to.deep.equal(['a', '', '']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('\n\na', 5, true)).to.deep.equal(['', '', 'a']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('a\n\nb', 5, true)).to.deep.equal(['a', '', 'b']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('a\n\n\nb', 5, true)).to.deep.equal(['a', '', '', 'b']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)((0, utils_1.stringToRed)('\n'), 5, true)).to.deep.equal((0, utils_1.arrayToRed)(['', '']));
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)((0, utils_1.stringToRed)('a\n'), 5, true)).to.deep.equal((0, utils_1.arrayToRed)(['a', '']));
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)((0, utils_1.stringToRed)('\na'), 5, true)).to.deep.equal((0, utils_1.arrayToRed)(['', 'a']));
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)((0, utils_1.stringToRed)('\na\n'), 5, true)).to.deep.equal((0, utils_1.arrayToRed)(['', 'a', '']));
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)((0, utils_1.stringToRed)('a\na'), 5, true)).to.deep.equal((0, utils_1.arrayToRed)(['a', 'a']));
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)((0, utils_1.stringToRed)('a \na'), 5, true)).to.deep.equal((0, utils_1.arrayToRed)(['a', 'a']));
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)((0, utils_1.stringToRed)('\n\n'), 5, true)).to.deep.equal((0, utils_1.arrayToRed)(['', '', '']));
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)((0, utils_1.stringToRed)('a\n\n'), 5, true)).to.deep.equal((0, utils_1.arrayToRed)(['a', '', '']));
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)((0, utils_1.stringToRed)('\n\na'), 5, true)).to.deep.equal((0, utils_1.arrayToRed)(['', '', 'a']));
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)((0, utils_1.stringToRed)('a\n\nb'), 5, true)).to.deep.equal((0, utils_1.arrayToRed)(['a', '', 'b']));
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)((0, utils_1.stringToRed)('a\n\n\nb'), 5, true)).to.deep.equal((0, utils_1.arrayToRed)(['a', '', '', 'b']));
                });
            });
            context('the length of lineChunk is longer than the length of container', () => {
                it('continues cut the word by wrapWord function', () => {
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('aaa bbb\nc', 3, true)).to.deep.equal(['aaa', 'bbb', 'c']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('a b c\nd', 3, true)).to.deep.equal(['a b', 'c', 'd']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('aaaa\nbbbb', 3, true)).to.deep.equal(['aaa', 'a', 'bbb', 'b']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('a\\bb\nc', 3, true)).to.deep.equal(['a\\', 'bb', 'c']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('a/bb\nc', 3, true)).to.deep.equal(['a/', 'bb', 'c']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('a_bb\nc', 3, true)).to.deep.equal(['a_', 'bb', 'c']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('a-bb\nc', 3, true)).to.deep.equal(['a-', 'bb', 'c']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('a.bb\nc', 3, true)).to.deep.equal(['a.', 'bb', 'c']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('a,bb\nc', 3, true)).to.deep.equal(['a,', 'bb', 'c']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('a;bb\nc', 3, true)).to.deep.equal(['a;', 'bb', 'c']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('aaa-b\nc', 3, true)).to.deep.equal(['aaa', '-b', 'c']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)((0, utils_1.stringToRed)('aaa bbb\nc'), 3, true)).to.deep.equal((0, utils_1.arrayToRed)(['aaa', 'bbb', 'c']));
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)((0, utils_1.stringToRed)('a b c\nd'), 3, true)).to.deep.equal((0, utils_1.arrayToRed)(['a b', 'c', 'd']));
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)((0, utils_1.stringToRed)('aaaa\nbbbb'), 3, true)).to.deep.equal((0, utils_1.arrayToRed)(['aaa', 'a', 'bbb', 'b']));
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)((0, utils_1.stringToRed)('a\\bb\nc'), 3, true)).to.deep.equal((0, utils_1.arrayToRed)(['a\\', 'bb', 'c']));
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)((0, utils_1.stringToRed)('a/bb\nc'), 3, true)).to.deep.equal((0, utils_1.arrayToRed)(['a/', 'bb', 'c']));
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)((0, utils_1.stringToRed)('a_bb\nc'), 3, true)).to.deep.equal((0, utils_1.arrayToRed)(['a_', 'bb', 'c']));
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)((0, utils_1.stringToRed)('a-bb\nc'), 3, true)).to.deep.equal((0, utils_1.arrayToRed)(['a-', 'bb', 'c']));
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)((0, utils_1.stringToRed)('a.bb\nc'), 3, true)).to.deep.equal((0, utils_1.arrayToRed)(['a.', 'bb', 'c']));
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)((0, utils_1.stringToRed)('a,bb\nc'), 3, true)).to.deep.equal((0, utils_1.arrayToRed)(['a,', 'bb', 'c']));
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)((0, utils_1.stringToRed)('a;bb\nc'), 3, true)).to.deep.equal((0, utils_1.arrayToRed)(['a;', 'bb', 'c']));
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)((0, utils_1.stringToRed)('aaa-b\nc'), 3, true)).to.deep.equal((0, utils_1.arrayToRed)(['aaa', '-b', 'c']));
                });
            });
        });
    });
    context('useWrapWord is disable', () => {
        context('the string does not contain the newline character', () => {
            it('returns the same output as wrapString\'s', () => {
                for (const string of strings) {
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)(string, 3, false)).to.deep.equal((0, wrapString_1.wrapString)(string, 3));
                }
            });
        });
        context('the string contains the newline character', () => {
            context('the length of lineChunk is smaller than the length of container', () => {
                it('splits by the newlines and does not trim the chunks', () => {
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('\n', 5, false)).to.deep.equal(['', '']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)(' a \n', 5, false)).to.deep.equal([' a ', '']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('\n a ', 5, false)).to.deep.equal(['', ' a ']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('\n a \n', 5, false)).to.deep.equal(['', ' a ', '']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)(' a \n b ', 5, false)).to.deep.equal([' a ', ' b ']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('\n\n', 5, false)).to.deep.equal(['', '', '']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)(' a \n\n', 5, false)).to.deep.equal([' a ', '', '']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('\n\n a ', 5, false)).to.deep.equal(['', '', ' a ']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)(' a \n\n b ', 5, false)).to.deep.equal([' a ', '', ' b ']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)(' a \n\n\n b ', 5, false)).to.deep.equal([' a ', '', '', ' b ']);
                });
            });
            context('the length of lineChunk is longer than the length of container', () => {
                it('cuts each chunkLine by wrapString and trim the small chunk if it starts with whitespace', () => {
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('    \nb', 3, false)).to.deep.equal(['   ', 'b']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('a   \nb', 3, false)).to.deep.equal(['a  ', 'b']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('aa  \nb', 3, false)).to.deep.equal(['aa ', 'b']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('aaa \nb', 3, false)).to.deep.equal(['aaa', 'b']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('aaaa\nb', 3, false)).to.deep.equal(['aaa', 'a', 'b']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('a   b\nc', 3, false)).to.deep.equal(['a  ', 'b', 'c']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('a    b\nc', 3, false)).to.deep.equal(['a  ', 'b', 'c']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('a     b\nc', 3, false)).to.deep.equal(['a  ', 'b', 'c']);
                    (0, chai_1.expect)((0, wrapCell_1.wrapCell)('aaa b\n c', 3, false)).to.deep.equal(['aaa', 'b', ' c']);
                });
            });
        });
    });
});
//# sourceMappingURL=wrapCell.js.map