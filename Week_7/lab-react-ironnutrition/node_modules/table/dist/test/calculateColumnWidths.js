"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const chalk_1 = __importDefault(require("chalk"));
const calculateColumnWidths_1 = __importDefault(require("../src/calculateColumnWidths"));
describe('calculateColumnWidths', () => {
    it('calculates the maximum column value index', () => {
        const columnWidths = (0, calculateColumnWidths_1.default)([
            [
                '',
                'a',
                'b',
                'c',
            ],
            [
                '',
                'a',
                'bbbbbbbbbb',
                'c',
            ],
            [
                '',
                '',
                'b',
                'ccccc',
            ],
        ]);
        (0, chai_1.expect)(columnWidths).to.deep.equal([0, 1, 10, 5]);
    });
    context('cell values contain ANSI codes', () => {
        it('uses visual width of the string', () => {
            const columnWidths = (0, calculateColumnWidths_1.default)([
                [
                    chalk_1.default.red('aaaaa'),
                ],
            ]);
            (0, chai_1.expect)(columnWidths[0]).to.equal(5);
        });
    });
    context('cell values contain fullwidth characters', () => {
        it('uses visual width of the string', () => {
            const columnWidths = (0, calculateColumnWidths_1.default)([
                [
                    chalk_1.default.red('Âè§'),
                ],
            ]);
            (0, chai_1.expect)(columnWidths[0]).to.equal(2);
        });
    });
});
//# sourceMappingURL=calculateColumnWidths.js.map