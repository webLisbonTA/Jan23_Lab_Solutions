"use strict";
/* eslint-disable max-nested-callbacks */
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const calculateRowHeights_1 = require("../src/calculateRowHeights");
const makeTableConfig_1 = require("../src/makeTableConfig");
describe('calculateRowHeights', () => {
    context('single column', () => {
        context('cell content width is lesser than column width', () => {
            it('is equal to 1', () => {
                const data = [['aaa']];
                const config = (0, makeTableConfig_1.makeTableConfig)(data, {
                    columns: {
                        0: {
                            width: 10,
                            wrapWord: false,
                        },
                    },
                });
                const rowHeights = (0, calculateRowHeights_1.calculateRowHeights)(data, config);
                (0, chai_1.expect)(rowHeights[0]).to.equal(1);
            });
        });
        context('cell content width is twice the size of the column width', () => {
            it('is equal to 2', () => {
                const data = [['aaabbb']];
                const config = (0, makeTableConfig_1.makeTableConfig)(data, {
                    columns: {
                        0: {
                            width: 3,
                            wrapWord: false,
                        },
                    },
                });
                const rowHeights = (0, calculateRowHeights_1.calculateRowHeights)(data, config);
                (0, chai_1.expect)(rowHeights[0]).to.equal(2);
            });
        });
    });
    context('multiple columns', () => {
        context('multiple cell content width is greater than the column width', () => {
            it('uses the largest height', () => {
                const data = [
                    ['aaabbb'],
                    ['aaabbb'],
                ];
                const config = (0, makeTableConfig_1.makeTableConfig)(data, {
                    columns: {
                        0: {
                            width: 2,
                            wrapWord: false,
                        },
                    },
                });
                const rowHeights = (0, calculateRowHeights_1.calculateRowHeights)(data, config);
                (0, chai_1.expect)(rowHeights[0]).to.equal(3);
            });
        });
    });
});
//# sourceMappingURL=calculateRowHeights.js.map