"use strict";
/* eslint-disable max-nested-callbacks */
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const drawHeader_1 = require("../src/drawHeader");
const makeTableConfig_1 = require("../src/makeTableConfig");
const utils_1 = require("./utils");
const basicContent = 'Lorem ipsum dolor sit amet';
const basicRows = [['aaa', 'bb', 'c']];
const createHeader = (headerWidth = 7, headerConfig) => {
    const config = (0, makeTableConfig_1.makeTableConfig)(basicRows, {
        header: headerConfig,
    });
    return (0, drawHeader_1.drawHeader)(headerWidth, config);
};
context('drawHeader', () => {
    context('when no given header', () => {
        it('throws an error', () => {
            const config = (0, makeTableConfig_1.makeTableConfig)(basicRows, {
                header: undefined,
            });
            (0, chai_1.expect)(() => {
                return (0, drawHeader_1.drawHeader)(7, config);
            }).to.throw('Can not draw header without header configuration');
        });
    });
    context('width', () => {
        it('forces to the given width', () => {
            const header = createHeader(7, {
                content: basicContent,
            });
            (0, chai_1.expect)(header).to.equal(`
║ Lorem i ║
║ psum do ║
║ lor sit ║
║  amet   ║
`.trimLeft());
        });
    });
    context('truncate', () => {
        it('truncates to the truncation value', () => {
            const header = createHeader(7, {
                content: basicContent,
                truncate: 7,
            });
            (0, chai_1.expect)(header).to.equal('║ Lorem … ║\n');
        });
    });
    context('wrapWord', () => {
        context('wrapWord = false', () => {
            it('slices to the given width', () => {
                const header = createHeader(7, {
                    content: basicContent,
                    wrapWord: false,
                });
                (0, chai_1.expect)(header).to.equal(`
║ Lorem i ║
║ psum do ║
║ lor sit ║
║  amet   ║
`.trimLeft());
            });
        });
        context('wrapWord = true', () => {
            it('wraps word properly', () => {
                const header = createHeader(7, {
                    content: basicContent,
                    wrapWord: true,
                });
                (0, chai_1.expect)(header).to.equal(`
║  Lorem  ║
║  ipsum  ║
║  dolor  ║
║   sit   ║
║  amet   ║
`.trimLeft());
            });
        });
    });
    context('alignment', () => {
        context('left', () => {
            it('aligns left', () => {
                const header = createHeader(7, {
                    alignment: 'left',
                    content: basicContent,
                    wrapWord: true,
                });
                (0, chai_1.expect)(header).to.equal(`
║ Lorem   ║
║ ipsum   ║
║ dolor   ║
║ sit     ║
║ amet    ║
`.trimLeft());
            });
        });
        context('center', () => {
            it('aligns center', () => {
                const header = createHeader(7, {
                    alignment: 'center',
                    content: basicContent,
                    wrapWord: true,
                });
                (0, chai_1.expect)(header).to.equal(`
║  Lorem  ║
║  ipsum  ║
║  dolor  ║
║   sit   ║
║  amet   ║
`.trimLeft());
            });
        });
        context('right', () => {
            it('aligns right', () => {
                const header = createHeader(7, {
                    alignment: 'right',
                    content: basicContent,
                    wrapWord: true,
                });
                (0, chai_1.expect)(header).to.equal(`
║   Lorem ║
║   ipsum ║
║   dolor ║
║     sit ║
║    amet ║
`.trimLeft());
            });
        });
        context('justify', () => {
            it('aligns justify', () => {
                const header = createHeader(12, {
                    alignment: 'justify',
                    content: basicContent,
                    wrapWord: true,
                });
                (0, chai_1.expect)(header).to.equal(`
║ Lorem  ipsum ║
║ dolor    sit ║
║ amet         ║
`.trimLeft());
            });
        });
    });
    context('padding', () => {
        it('pads properly', () => {
            const header = createHeader(12, {
                content: basicContent,
                paddingLeft: 2,
                paddingRight: 3,
            });
            (0, chai_1.expect)(header).to.equal(`
║  Lorem ipsum    ║
║  dolor sit am   ║
║       et        ║
`.trimLeft());
        });
    });
    context('mixed with ansi word', () => {
        it('works properly', () => {
            const header = createHeader(16, {
                content: `${utils_1.openBold}This is the header with ${utils_1.openRed}ansi words${utils_1.closeRed}${utils_1.closeBold}`,
                wrapWord: true,
            });
            (0, chai_1.expect)(header).to.equal(`
║   ${utils_1.openBold}This is the${utils_1.closeBold}    ║
║ ${utils_1.openBold}header with ${utils_1.openRed}ansi${utils_1.closeRed}${utils_1.closeBold} ║
║      ${utils_1.openBold}${utils_1.openRed}words${utils_1.closeBold}${utils_1.closeRed}       ║
`.trimLeft());
        });
    });
});
//# sourceMappingURL=drawHeader.js.map