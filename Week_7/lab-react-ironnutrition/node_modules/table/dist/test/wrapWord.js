"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const wrapWord_1 = require("../src/wrapWord");
const utils_1 = require("./utils");
describe('wrapWord', () => {
    it('wraps a string at a nearest whitespace', () => {
        (0, chai_1.expect)((0, wrapWord_1.wrapWord)('aaa bbb', 5)).to.deep.equal(['aaa', 'bbb']);
        (0, chai_1.expect)((0, wrapWord_1.wrapWord)('a a a bbb', 5)).to.deep.equal(['a a a', 'bbb']);
        (0, chai_1.expect)((0, wrapWord_1.wrapWord)((0, utils_1.stringToRed)('aaa bbb'), 5)).to.deep.equal((0, utils_1.arrayToRed)(['aaa', 'bbb']));
        (0, chai_1.expect)((0, wrapWord_1.wrapWord)((0, utils_1.stringToRed)('a a a bbb'), 5)).to.deep.equal((0, utils_1.arrayToRed)(['a a a', 'bbb']));
    });
    context('a single word is longer than chunk size', () => {
        it('cuts the word', () => {
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)('aaaaa', 2)).to.deep.equal(['aa', 'aa', 'a']);
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)((0, utils_1.stringToRed)('aaaaa'), 2)).to.deep.equal((0, utils_1.arrayToRed)(['aa', 'aa', 'a']));
        });
    });
    context('empty string', () => {
        it('should return empty string as well', () => {
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)('', 0)).to.deep.equal(['']);
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)('', 1)).to.deep.equal(['']);
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)('', 2)).to.deep.equal(['']);
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)('', 3)).to.deep.equal(['']);
        });
    });
    context('a long word with a special character', () => {
        it('cuts the word at the special character', () => {
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)('aaa\\bbb', 5)).to.deep.equal(['aaa\\', 'bbb']);
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)('aaa/bbb', 5)).to.deep.equal(['aaa/', 'bbb']);
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)('aaa_bbb', 5)).to.deep.equal(['aaa_', 'bbb']);
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)('aaa-bbb', 5)).to.deep.equal(['aaa-', 'bbb']);
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)('aaa.bbb', 5)).to.deep.equal(['aaa.', 'bbb']);
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)('aaa,bbb', 5)).to.deep.equal(['aaa,', 'bbb']);
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)('aaa;bbb', 5)).to.deep.equal(['aaa;', 'bbb']);
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)((0, utils_1.stringToRed)('aaa\\bbb'), 5)).to.deep.equal((0, utils_1.arrayToRed)(['aaa\\', 'bbb']));
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)((0, utils_1.stringToRed)('aaa/bbb'), 5)).to.deep.equal((0, utils_1.arrayToRed)(['aaa/', 'bbb']));
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)((0, utils_1.stringToRed)('aaa_bbb'), 5)).to.deep.equal((0, utils_1.arrayToRed)(['aaa_', 'bbb']));
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)((0, utils_1.stringToRed)('aaa-bbb'), 5)).to.deep.equal((0, utils_1.arrayToRed)(['aaa-', 'bbb']));
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)((0, utils_1.stringToRed)('aaa.bbb'), 5)).to.deep.equal((0, utils_1.arrayToRed)(['aaa.', 'bbb']));
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)((0, utils_1.stringToRed)('aaa,bbb'), 5)).to.deep.equal((0, utils_1.arrayToRed)(['aaa,', 'bbb']));
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)((0, utils_1.stringToRed)('aaa;bbb'), 5)).to.deep.equal((0, utils_1.arrayToRed)(['aaa;', 'bbb']));
        });
    });
    context('a special character after the length of a container', () => {
        it('does not include special character', () => {
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)('aa-bbbbb-cccc', 5)).to.deep.equal(['aa-', 'bbbbb', '-cccc']);
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)((0, utils_1.stringToRed)('aa-bbbbb-cccc'), 5)).to.deep.equal((0, utils_1.arrayToRed)(['aa-', 'bbbbb', '-cccc']));
        });
    });
    context('mixed ansi and plain', () => {
        it('returns proper strings', () => {
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)(`${utils_1.openRed}Lorem ${utils_1.closeRed}ipsum dolor ${utils_1.openRed}sit amet${utils_1.closeRed}`, 5)).to.deep.equal([
                `${utils_1.openRed}Lorem${utils_1.closeRed}`,
                'ipsum',
                'dolor',
                `${utils_1.openRed}sit${utils_1.closeRed}`,
                `${utils_1.openRed}amet${utils_1.closeRed}`,
            ]);
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)(`${utils_1.openRed}Lorem ${utils_1.closeRed}ipsum dolor ${utils_1.openRed}sit amet${utils_1.closeRed}`, 11)).to.deep.equal([
                `${utils_1.openRed}Lorem ${utils_1.closeRed}ipsum`,
                `dolor ${utils_1.openRed}sit${utils_1.closeRed}`,
                `${utils_1.openRed}amet${utils_1.closeRed}`,
            ]);
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)(`${utils_1.openRed}Lorem ip${utils_1.closeRed}sum dolor si${utils_1.openRed}t amet${utils_1.closeRed}`, 5)).to.deep.equal([
                `${utils_1.openRed}Lorem${utils_1.closeRed}`,
                `${utils_1.openRed}ip${utils_1.closeRed}sum`,
                'dolor',
                `si${utils_1.openRed}t${utils_1.closeRed}`,
                `${utils_1.openRed}amet${utils_1.closeRed}`,
            ]);
        });
    });
    context('multiple ansi', () => {
        it('returns proper strings', () => {
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)(`${utils_1.openBold}${utils_1.openRed}Lorem ipsum dolor sit${utils_1.closeRed}${utils_1.closeBold}`, 4)).to.deep.equal([
                `${utils_1.openBold}${utils_1.openRed}Lore${utils_1.closeRed}${utils_1.closeBold}`,
                `${utils_1.openBold}${utils_1.openRed}m${utils_1.closeRed}${utils_1.closeBold}`,
                `${utils_1.openBold}${utils_1.openRed}ipsu${utils_1.closeRed}${utils_1.closeBold}`,
                `${utils_1.openBold}${utils_1.openRed}m${utils_1.closeRed}${utils_1.closeBold}`,
                `${utils_1.openBold}${utils_1.openRed}dolo${utils_1.closeRed}${utils_1.closeBold}`,
                `${utils_1.openBold}${utils_1.openRed}r${utils_1.closeRed}${utils_1.closeBold}`,
                `${utils_1.openBold}${utils_1.openRed}sit${utils_1.closeBold}${utils_1.closeRed}`
            ]);
            (0, chai_1.expect)((0, wrapWord_1.wrapWord)(`${utils_1.openBold}${utils_1.openRed}Lorem ipsum dolor sit${utils_1.closeRed}${utils_1.closeBold}`, 5)).to.deep.equal([
                `${utils_1.openBold}${utils_1.openRed}Lorem${utils_1.closeRed}${utils_1.closeBold}`,
                `${utils_1.openBold}${utils_1.openRed}ipsum${utils_1.closeRed}${utils_1.closeBold}`,
                `${utils_1.openBold}${utils_1.openRed}dolor${utils_1.closeRed}${utils_1.closeBold}`,
                `${utils_1.openBold}${utils_1.openRed}sit${utils_1.closeBold}${utils_1.closeRed}`
            ]);
        });
    });
});
//# sourceMappingURL=wrapWord.js.map