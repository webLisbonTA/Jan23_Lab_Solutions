"use strict";
/* eslint-disable max-nested-callbacks */
/* eslint-disable sort-keys-fix/sort-keys-fix */
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const src_1 = require("../src");
describe('getBorderCharacters', () => {
    context('given name \'honeywell\'', () => {
        it('returns the \'honeywell\' template', () => {
            (0, chai_1.expect)((0, src_1.getBorderCharacters)('honeywell')).to.be.deep.equal({
                headerJoin: '┬',
                bodyJoin: '│',
                bodyLeft: '║',
                bodyRight: '║',
                bottomJoin: '╧',
                bottomLeft: '╚',
                bottomRight: '╝',
                bottomBody: '═',
                joinBody: '─',
                joinJoin: '┼',
                joinLeft: '╟',
                joinRight: '╢',
                topBody: '═',
                topJoin: '╤',
                topLeft: '╔',
                topRight: '╗',
            });
        });
    });
    context('given name \'norc\'', () => {
        it('returns the \'norc\' template', () => {
            (0, chai_1.expect)((0, src_1.getBorderCharacters)('norc')).to.be.deep.equal({
                headerJoin: '┬',
                bodyJoin: '│',
                bodyLeft: '│',
                bodyRight: '│',
                bottomJoin: '┴',
                bottomLeft: '└',
                bottomRight: '┘',
                bottomBody: '─',
                joinJoin: '┼',
                joinLeft: '├',
                joinRight: '┤',
                joinBody: '─',
                topBody: '─',
                topJoin: '┬',
                topLeft: '┌',
                topRight: '┐',
            });
        });
    });
    context('given name \'ramac\'', () => {
        it('returns the \'ramac\' template', () => {
            (0, chai_1.expect)((0, src_1.getBorderCharacters)('ramac')).to.be.deep.equal({
                headerJoin: '+',
                bodyJoin: '|',
                bodyLeft: '|',
                bodyRight: '|',
                bottomJoin: '+',
                bottomLeft: '+',
                bottomRight: '+',
                bottomBody: '-',
                joinJoin: '|',
                joinLeft: '|',
                joinRight: '|',
                joinBody: '-',
                topBody: '-',
                topJoin: '+',
                topLeft: '+',
                topRight: '+',
            });
        });
    });
    context('given name \'void\'', () => {
        it('returns the \'void\' template', () => {
            (0, chai_1.expect)((0, src_1.getBorderCharacters)('void')).to.be.deep.equal({
                headerJoin: '',
                bodyJoin: '',
                bodyLeft: '',
                bodyRight: '',
                bottomJoin: '',
                bottomLeft: '',
                bottomRight: '',
                bottomBody: '',
                joinJoin: '',
                joinLeft: '',
                joinRight: '',
                joinBody: '',
                topBody: '',
                topJoin: '',
                topLeft: '',
                topRight: '',
            });
        });
    });
    context('given another name', () => {
        it('throws an error', () => {
            (0, chai_1.expect)(() => {
                return (0, src_1.getBorderCharacters)('bold');
            }).to.throw(Error, 'Unknown border template "bold".');
        });
    });
});
//# sourceMappingURL=getBorderCharacters.js.map