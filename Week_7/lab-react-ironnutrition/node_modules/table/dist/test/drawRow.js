"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const drawRow_1 = require("../src/drawRow");
const drawVerticalLine = () => {
    return true;
};
describe('drawRow', () => {
    context('default drawVerticalLine', () => {
        it('draws a row using all parts', () => {
            const border = {
                bodyJoin: '│',
                bodyLeft: '║',
                bodyRight: '║',
            };
            const config = {
                border,
                drawVerticalLine,
            };
            (0, chai_1.expect)((0, drawRow_1.drawRow)([], config)).to.equal('║║\n');
            (0, chai_1.expect)((0, drawRow_1.drawRow)(['a'], config)).to.equal('║a║\n');
            (0, chai_1.expect)((0, drawRow_1.drawRow)(['a', ' b '], config)).to.equal('║a│ b ║\n');
        });
    });
    context('custom drawVerticalLine', () => {
        it('draws the vertical line when the drawVerticalLine returns true', () => {
            const rows = [' a ', ' b ', ' c '];
            const border = {
                bodyJoin: '│',
                bodyLeft: '║',
                bodyRight: '║',
            };
            (0, chai_1.expect)((0, drawRow_1.drawRow)(rows, {
                border,
                drawVerticalLine: (index) => {
                    return index === 0;
                },
            })).to.equal('║ a  b  c \n');
            (0, chai_1.expect)((0, drawRow_1.drawRow)(rows, {
                border,
                drawVerticalLine: (index) => {
                    return index % 2 === 0;
                },
            })).to.equal('║ a  b │ c \n');
            (0, chai_1.expect)((0, drawRow_1.drawRow)(rows, {
                border,
                drawVerticalLine: (index, size) => {
                    return index > 0 && index <= size;
                },
            })).to.equal(' a │ b │ c ║\n');
        });
    });
});
//# sourceMappingURL=drawRow.js.map