"use strict";
/* eslint-disable max-nested-callbacks */
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const makeStreamConfig_1 = require("../src/makeStreamConfig");
const baseStreamConfig = {
    columnCount: 1,
    columnDefault: {
        width: 5,
    },
};
describe('makeStreamConfig', () => {
    it('does not affect the parameter configuration object', () => {
        (0, makeStreamConfig_1.makeStreamConfig)(baseStreamConfig);
        (0, chai_1.expect)(baseStreamConfig).to.equal(baseStreamConfig);
    });
    context('columnDefault', () => {
        context('not contains width', () => {
            it('throws an error', () => {
                (0, chai_1.expect)(() => {
                    return (0, makeStreamConfig_1.makeStreamConfig)({ columnCount: 2,
                        columnDefault: {} });
                }).to.be.throw('Must provide config.columnDefault.width when creating a stream.');
            });
        });
    });
    context('column', () => {
        context('alignment', () => {
            context('is not provided', () => {
                it('defaults to "left"', () => {
                    const config = (0, makeStreamConfig_1.makeStreamConfig)(baseStreamConfig);
                    (0, chai_1.expect)(config.columns[0].alignment).to.equal('left');
                });
            });
            context('is provided', () => {
                it('uses the custom value', () => {
                    const config = (0, makeStreamConfig_1.makeStreamConfig)({ ...baseStreamConfig,
                        columns: {
                            0: {
                                alignment: 'center',
                            },
                        } });
                    (0, chai_1.expect)(config.columns[0].alignment).to.equal('center');
                });
            });
        });
        context('paddingLeft', () => {
            context('is not provided', () => {
                it('defaults to 1', () => {
                    const config = (0, makeStreamConfig_1.makeStreamConfig)(baseStreamConfig);
                    (0, chai_1.expect)(config.columns[0].paddingLeft).to.equal(1);
                });
            });
            context('is provided', () => {
                it('uses the custom value', () => {
                    const config = (0, makeStreamConfig_1.makeStreamConfig)({ ...baseStreamConfig,
                        columns: {
                            0: {
                                paddingLeft: 3,
                            },
                        } });
                    (0, chai_1.expect)(config.columns[0].paddingLeft).to.equal(3);
                });
            });
        });
        context('paddingRight', () => {
            context('is not provided', () => {
                it('defaults to 1', () => {
                    const config = (0, makeStreamConfig_1.makeStreamConfig)(baseStreamConfig);
                    (0, chai_1.expect)(config.columns[0].paddingRight).to.equal(1);
                });
            });
            context('is provided', () => {
                it('uses the custom value', () => {
                    const config = (0, makeStreamConfig_1.makeStreamConfig)({ ...baseStreamConfig,
                        columns: {
                            0: {
                                paddingRight: 3,
                            },
                        } });
                    (0, chai_1.expect)(config.columns[0].paddingRight).to.equal(3);
                });
            });
        });
    });
    context('"drawVerticalLine', () => {
        context('is not provided', () => {
            it('defaults to retuning true', () => {
                const config = (0, makeStreamConfig_1.makeStreamConfig)(baseStreamConfig);
                (0, chai_1.expect)(config.drawVerticalLine(-1, -1)).to.equal(true);
            });
        });
        context('is provided', () => {
            it('uses the custom function', () => {
                const config = (0, makeStreamConfig_1.makeStreamConfig)({
                    ...baseStreamConfig,
                    drawVerticalLine: () => {
                        return false;
                    },
                });
                (0, chai_1.expect)(config.drawVerticalLine(-1, -1)).to.equal(false);
            });
        });
    });
});
//# sourceMappingURL=makeStreamConfig.js.map