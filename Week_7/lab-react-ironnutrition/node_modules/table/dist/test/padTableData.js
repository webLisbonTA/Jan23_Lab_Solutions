"use strict";
/* eslint-disable max-nested-callbacks */
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const makeTableConfig_1 = require("../src/makeTableConfig");
const padTableData_1 = require("../src/padTableData");
describe('padTableData', () => {
    context('when no given userConfig', () => {
        it('inserts 01 whitespace character regardless of string whitespaces', () => {
            const rows = [[' a  ']];
            (0, chai_1.expect)((0, padTableData_1.padTableData)(rows, (0, makeTableConfig_1.makeTableConfig)(rows, undefined))).to.deep.equal([['  a   ']]);
        });
    });
    context('when given paddings in columnDefault', () => {
        context('when no given column-specific paddings', () => {
            it('uses the columnDefault values', () => {
                const rows = [['a']];
                (0, chai_1.expect)((0, padTableData_1.padTableData)(rows, (0, makeTableConfig_1.makeTableConfig)(rows, { columnDefault: {
                        paddingLeft: 2,
                        paddingRight: 3,
                    } }))).to.deep.equal([['  a   ']]);
            });
        });
        context('when given column-specific padding values', () => {
            it('uses column-specific padding values', () => {
                const rows = [['a']];
                (0, chai_1.expect)((0, padTableData_1.padTableData)(rows, (0, makeTableConfig_1.makeTableConfig)(rows, {
                    columnDefault: {
                        paddingLeft: 2,
                        paddingRight: 3,
                    },
                    columns: {
                        0: {
                            paddingLeft: 4,
                            paddingRight: 5,
                        },
                    },
                }))).to.deep.equal([['    a     ']]);
            });
        });
    });
    context('when given multiple rows and columns', () => {
        it('uses corresponding column-specific padding values or fallback to the default padding values', () => {
            const rows = [['a', 'b'], ['c', 'd']];
            (0, chai_1.expect)((0, padTableData_1.padTableData)(rows, (0, makeTableConfig_1.makeTableConfig)(rows, {
                columnDefault: {
                    paddingLeft: 2,
                    paddingRight: 3,
                },
                columns: {
                    0: {
                        paddingLeft: 4,
                    },
                    1: {
                        paddingRight: 5,
                    },
                },
            }))).to.deep.equal([['    a   ', '  b     '], ['    c   ', '  d     ']]);
        });
    });
});
//# sourceMappingURL=padTableData.js.map